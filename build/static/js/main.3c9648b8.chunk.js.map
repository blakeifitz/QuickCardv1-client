{"version":3,"sources":["card-context.js","AddDeck/page-parse.js","config.js","Services/token-service.js","AddDeck/new-deck.js","ViewCards/flashcard.js","misc-functions.js","ViewCards/view-cards.js","ViewDecks/view-decks.js","Services/auth-service.js","LandingPage/login-form.js","LandingPage/landing-page.js","App/Header/header.js","Routes/private-route.js","Routes/public-route.js","LandingPage/signup-form.js","App/App.js","reportWebVitals.js","index.js"],"names":["CardContext","React","createContext","notes","decks","cards","commitCards","commitDeck","deleteDeck","deleteCard","updateDeck","updateCard","PageParse","deckId","splitSymbol","keywords","split","filter","note","map","slice","definitions","keyword","pop","definition","card","i","length","deck","Object","values","indexOf","push","process","REACT_APP_API_KEY","TokenService","saveAuthToken","token","window","localStorage","setItem","config","getAuthToken","getItem","clearAuthToken","removeItem","hasAuthToken","makebearerAuthToken","userId","password","btoa","NewDeck","handleSubmit","e","preventDefault","newNotes","target","value","deckName","description","deck_name","created","Date","setState","errorMessage","fetch","method","headers","authorization","body","JSON","stringify","then","deckRes","ok","json","Promise","reject","res","id","context","forEach","cardRes","props","history","catch","error","console","state","this","onSubmit","htmlFor","placeholder","onClick","Component","contextType","Flashcard","handleDelete","CardId","parseFloat","editCardId","handleSave","keywordInputValue","definitionInputValue","updatedCard","showAnswer","className","cardNumber","initState","onChange","name","required","renderEdit","renderStandard","defaultProps","getCardsForDeck","toString","ViewCard","match","params","getCurrentCard","nextCard","handleNext","handleBack","ViewDecks","editDeckId","nameInputValue","descriptionInputValue","updatedDeck","handleClickDelete","countCards","Link","to","defaultValue","AuthService","postLogin","credentials","postUser","user","LoginForm","handleSubmitAuth","ev","user_name","authToken","onLoginSuccess","role","type","LandingPage","handleLoginSuccess","location","destination","from","Header","handleLogoutClick","renderLogoutLink","renderLoginLink","PrivateRoute","component","Route","render","componentProps","Redirect","pathname","PublicRoute","RegistrationForm","handleSuccess","full_name","nick_name","nickname","App","handleCommitCards","handleCommitDeck","handleDeleteCard","cardId","handleDeleteDeck","handleUpdateDeck","handleUpdateCard","all","path","exact","Provider","renderMain","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.3c9648b8.chunk.js","sourcesContent":["import React from 'react';\n\nconst CardContext = React.createContext({\n    notes:\"\",\n    decks: [],\n    cards:[],\n    commitCards: () => {},\n    commitDeck: () => {},\n    deleteDeck: () => {},\n    deleteCard: () => {},\n    updateDeck: () => {},\n    updateCard: () => {},\n})\n\nexport default CardContext","export const PageParse = (notes = [], deckId, splitSymbol) => {\n  //Split at line return\n\n  notes = notes.split(/\\r?\\n/);\n\n  //Filter out empty string from line return\n  notes = notes.filter((note) => note !== \"\");\n\n  //Go through each item in the array and split at the symbol.\n  notes = notes.map((note) => note.split(splitSymbol));\n\n  //Slice Keyword and definition into separate arrays\n  let keywords = notes.map((note) => note.slice(0, 1));\n\n  let definitions = notes.map((note) => note.slice(1, 2));\n  //Get value from popped\n\n  keywords = keywords.map((keyword) => keyword.pop());\n\n  definitions = definitions.map((definition) => definition.pop());\n  //Mash into shape\n\n  let card = {};\n  let cards = [];\n  for (var i = 0; i < keywords.length; i++) {\n    card = {\n      deck: deckId,\n      keyword: keywords[i],\n      definition: definitions[i],\n    };\n    //only push cards without undefined values\n    //TODO use typeOf to ensure people can use the string \"undefined\"\n    if (Object.values(card).indexOf(undefined || \"\") === -1) {\n      cards.push(card);\n    }\n  }\n\n  if (cards.length !== 0) {\n    return cards;\n  } else {\n    return null;\n  }\n};\n","\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n    API_ENDPOINT: `https://quickcardv1-api.herokuapp.com/api`,\n    API_KEY: process.env.REACT_APP_API_KEY,\n    TOKEN_KEY: 'quickcard-client-auth-token',\n  }","import config from \"../config\";\n\nconst TokenService = {\n  saveAuthToken(token) {\n    window.localStorage.setItem(config.TOKEN_KEY, token);\n  },\n  getAuthToken() {\n    return window.localStorage.getItem(config.TOKEN_KEY);\n  },\n  clearAuthToken() {\n    window.localStorage.removeItem(config.TOKEN_KEY);\n  },\n  hasAuthToken() {\n    return !!TokenService.getAuthToken();\n  },\n  makebearerAuthToken(userId, password) {\n    return window.btoa(`${userId}:${password}`);\n  },\n};\n\nexport default TokenService;\n","import React from \"react\";\nimport CardContext from \"../card-context\";\nimport { PageParse } from \"./page-parse\";\nimport config from \"../config\";\nimport TokenService from \"../Services/token-service\";\nimport \"./new-deck.css\";\n\nexport default class NewDeck extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      errorMessage: 0,\n    };\n  }\n  static contextType = CardContext;\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let newNotes = e.target[\"notes\"].value;\n    let deckName = e.target[\"deckName\"].value;\n    let description = e.target[\"deckDescription\"].value;\n    let splitSymbol = e.target[\"symbol-select\"].value;\n\n    const deck = {\n      deck_name: deckName,\n      description: description,\n      created: new Date(),\n    };\n\n    let cards = PageParse(newNotes, 0, splitSymbol);\n\n    if (!cards) {\n      return this.setState({ errorMessage: 1 });\n    } else {\n      fetch(`${config.API_ENDPOINT}/deck`, {\n        method: \"POST\",\n        headers: {\n          authorization: `bearer ${TokenService.getAuthToken()}`,\n          \"content-type\": \"application/json\",\n        },\n        body: JSON.stringify(deck),\n      })\n        //If resolve is not okay return the json error and reject promis\n        .then((deckRes) => {\n          if (!deckRes.ok) return deckRes.json().then((e) => Promise.reject(e));\n          return deckRes.json();\n        })\n\n        //cards get deckID from response from api after adding the deck\n        .then((res) => {\n          cards = PageParse(newNotes, res.id, splitSymbol);\n          deck.id = res.id;\n          this.context.commitDeck(deck);\n          cards.forEach((card) =>\n            fetch(`${config.API_ENDPOINT}/card`, {\n              method: \"POST\",\n              headers: {\n                \"content-type\": \"application/json\",\n                authorization: `bearer ${TokenService.getAuthToken()}`,\n              },\n              body: JSON.stringify(card),\n\n              //check card resolve\n            })\n              .then((cardRes) => {\n                if (!cardRes.ok)\n                  return cardRes.json().then((e) => Promise.reject(e));\n                return cardRes.json();\n              })\n              .then((res) => {\n                this.context.commitCards(res);\n              })\n          );\n\n    \n          this.props.history.push(\"/deck\");\n        })\n        .catch((error) => {\n          console.error({ error });\n        });\n    }\n  };\n  render() {\n    return (\n      <div>\n        {this.state.errorMessage !== 0 && <p>Please add valid notes to deck</p>}\n        <h2>Add Deck</h2>\n        <form onSubmit={this.handleSubmit}>\n          <br />\n          <label htmlFor=\"deckName\">Enter Deck Name</label>\n          <br />\n          <input placeholder=\"Name of Deck\" id=\"deckName\" />\n          <br />\n          <label htmlFor=\"notes\">Insert notes</label>\n          <br />\n          <textarea\n            placeholder='Example:\"NPX: Allows for running a one time command as if it was global.\"(Separate cards by line return)'\n            id=\"notes\"\n          ></textarea>\n          <br />\n          <label htmlFor=\"deckDescription\">Describe Deck</label>\n          <br />\n          <input\n            placeholder=\"What is the deck for?\"\n            id=\"deckDescription\"\n          ></input>\n          <label htmlFor=\"note-folder-select\">Split Symbol</label>\n          <select id=\"symbol-select\">\n            <option value=\":\">:</option>\n            <option value=\"?\">?</option>\n            <option value=\"-\">-</option>\n            <option value=\"/\">/</option>\n          </select>\n          <br />\n          <br />\n          <button>Submit</button>\n        </form>\n        <button onClick={() => this.props.history.push(\"/deck\")}>Cancel</button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport CardContext from \"../card-context\";\nimport config from \"../config\";\nimport TokenService from \"../Services/token-service\";\nimport \"./flashcard.css\";\nexport default class Flashcard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      definitionInputValue: \"\",\n      keywordInputValue: \"\",\n      editCardId: \"\",\n    };\n  }\n  static contextType = CardContext;\n\n  handleDelete = (e) => {\n    e.preventDefault();\n    const CardId = parseFloat(this.state.editCardId);\n    fetch(`${config.API_ENDPOINT}/card/${CardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: `bearer ${TokenService.getAuthToken()}`,\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (!res.ok) {\n          return res.json().then((e) => Promise.reject(e));\n        }\n      })\n      .then(() => {\n        this.context.deleteCard(CardId);\n      })\n      .catch((error) => {\n        console.error({ error });\n      });\n  };\n\n  handleSave = (e) => {\n    e.preventDefault();\n    const keyword = this.state.keywordInputValue;\n    const definition = this.state.definitionInputValue;\n    const CardId = parseFloat(this.state.editCardId);\n    let id = CardId;\n    let deck = this.props.deck;\n    const updatedCard = { id, keyword, definition, deck };\n    fetch(`${config.API_ENDPOINT}/Card/${CardId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(updatedCard),\n      headers: {\n        authorization: `bearer ${TokenService.getAuthToken()}`,\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (!res.ok) return res.json().then((error) => Promise.reject(error));\n      })\n      .then(() => {\n        this.context.updateCard(updatedCard, CardId);\n        this.setState({\n          editCardId: \"\",\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  renderStandard(card) {\n    return !this.props.showAnswer ? (\n      <div className=\"content-wrapper\">\n        <h4>Word/Phrase:</h4>\n        <p>{card.keyword ? card.keyword : \"\"}</p>\n        <p>{card.cardNumber}</p>\n        <button\n          onClick={(e) =>\n            this.setState({\n              editCardId: card.id,\n              keywordInputValue: card.keyword,\n              definitionInputValue: card.definition,\n            })\n          }\n        >\n          Edit\n        </button>\n        <h4>Click to Flip</h4>\n      </div>\n    ) : (\n      <div className=\"content-wrapper\">\n        <h4>Definition:</h4>\n        <p>{card.definition}</p>\n        <p>{card.cardNumber}</p>\n        <button\n          onClick={(e) =>\n            this.setState({\n              editCardId: card.id,\n              keywordInputValue: card.keyword,\n              definitionInputValue: card.definition,\n            })\n          }\n        >\n          Edit\n        </button>\n        <h4>Click to Flip</h4>\n      </div>\n    );\n  }\n  renderEdit(card) {\n    const initState = {\n      definitionInputValue: \"\",\n      keywordInputValue: \"\",\n      editCardId: \"\",\n    };\n    return (\n      <>\n        <div>\n          <br />\n          <h4>Word/Phrase:</h4>\n          <p>\n            {\" \"}\n            <input\n              value={this.state.keywordInputValue}\n              onChange={(e) =>\n                this.setState({ keywordInputValue: e.target.value })\n              }\n              className=\"inline-edit_input\"\n              name=\"edit-name\"\n              required\n            />\n          </p>\n          <p>edit</p>\n          <br />\n        </div>\n        <div>\n          <h4>Definition:</h4>{\" \"}\n          <textarea\n            value={this.state.definitionInputValue}\n            onChange={(e) =>\n              this.setState({ definitionInputValue: e.target.value })\n            }\n            className=\"inline-edit_input\"\n            name=\"edit-name\"\n            required\n          />\n          <p>edit</p>\n          <button onClick={(e) => this.setState({ ...initState })}>\n            Cancel\n          </button>\n          <button onClick={(e) => this.handleSave(e)}>Save</button>\n          <button onClick={(e) => this.handleDelete(e)}>Delete</button>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    let card = this.props.card;\n    return (\n      <div className=\"flashcard-box\">\n        {card.id === this.state.editCardId ? (\n          <div>{this.renderEdit(card)}</div>\n        ) : (\n          <div>{this.renderStandard(card)}</div>\n        )}\n        <button onClick={() => this.props.history.push(\"/deck\")}>\n          Exit Deck\n        </button>\n      </div>\n    );\n  }\n}\nFlashcard.defaultProps = {\n  card: [\n    {\n      keyword: \"\",\n      definition: \"\",\n      cardNumber: 1,\n    },\n  ],\n};\n","export const getCardsForDeck = (cards = [], deckId) => {\n  cards = cards.filter((card) => card.deck.toString() === deckId);\n  cards.map((card, i) => (card.cardNumber = i + 1));\n  return cards;\n};\n\nexport const getDeckFromId = (deckId, decks) => {\n  return decks.filter((deck) => deck === deckId);\n};\n","import React from \"react\";\nimport CardContext from \"../card-context\";\nimport Flashcard from \"./flashcard\";\nimport { getCardsForDeck} from \"../misc-functions\";\nimport \"./view-cards.css\";\n\nexport default class ViewCard extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      showAnswer: false,\n      cardNumber: 1,\n    };\n  }\n\n  static contextType = CardContext;\n\n  handleNext(e) {\n    e.preventDefault();\n    return this.setState({\n      cardNumber: this.state.cardNumber + 1,\n    });\n  }\n\n  handleBack(e) {\n    e.preventDefault();\n    this.setState({ cardNumber: this.state.cardNumber - 1 });\n  }\n\n  getCurrentCard() {\n    const cards = this.context.cards;\n    const { deckId } = this.props.match.params;\n    const cardsInDeck = getCardsForDeck(cards, deckId);\n    let currentCard = cardsInDeck.filter(\n      (card) => card.cardNumber === this.state.cardNumber\n    );\n\n    return currentCard[0];\n  }\n\n  render() {\n    const { deckId } = this.props.match.params;\n    const cards = getCardsForDeck(this.context.cards, deckId);\n\n    return (\n      <>\n        <div\n          onClick={() => {\n            this.setState({ showAnswer: !this.state.showAnswer });\n          }}\n        >\n          <Flashcard\n            card={this.getCurrentCard()}\n            history={this.props.history}\n            nextCard={this.handleNext}\n            showAnswer={this.state.showAnswer}\n            deck={deckId}\n          />\n        </div>\n        <div className=\"card-buttons\">\n          {this.state.cardNumber < cards.length && (\n            <button onClick={(e) => this.handleNext(e)}>Next</button>\n          )}\n          <button\n            onClick={() => {\n              this.setState({ showAnswer: !this.state.showAnswer });\n            }}\n          >\n            Flip\n          </button>\n          {this.state.cardNumber > 1 && (\n            <button onClick={(e) => this.handleBack(e)}>Back</button>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./view-decks.css\";\nimport { getCardsForDeck } from \"../misc-functions\";\nimport CardContext from \"../card-context\";\nimport config from \"../config\";\nimport TokenService from \"../Services/token-service\";\n\nexport default class ViewDecks extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      descriptionInputValue: \"\",\n      nameInputValue: \"\",\n      editDeckId: \"\",\n      decks: [],\n      cards: [],\n    };\n  }\n\n  static contextType = CardContext;\n\n  handleSave = (e) => {\n    e.preventDefault();\n    const id = this.state.editDeckId;\n    const deck_name = this.state.nameInputValue;\n    const description = this.state.descriptionInputValue;\n    const deckId = parseFloat(this.state.editDeckId);\n    const updatedDeck = { id, deck_name, description };\n    fetch(`${config.API_ENDPOINT}/deck/${deckId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(updatedDeck),\n      headers: {\n        authorization: `bearer ${TokenService.getAuthToken()}`,\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (!res.ok) return res.json().then((error) => Promise.reject(error));\n      })\n      .then(() => {\n        this.context.updateDeck(updatedDeck);\n        this.setState({\n          editDeckId: \"\",\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  handleClickDelete = () => {\n    const deckId = parseFloat(this.state.editDeckId);\n    fetch(`${config.API_ENDPOINT}/deck/${deckId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: `bearer ${TokenService.getAuthToken()}`,\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (!res.ok) {\n          return res.json().then((e) => Promise.reject(e));\n        }\n      })\n      .then(() => {\n        this.context.deleteDeck(deckId);\n        let { cards = [] } = this.state;\n        cards = getCardsForDeck(cards, deckId);\n        cards.forEach((card) => {\n          return this.props.deleteCard(card.id);\n        });\n      })\n      .catch((error) => {\n        console.error({ error });\n      });\n  };\n  renderStandard(deck) {\n    const cards = this.context.cards;\n    const deckId = deck.id.toString();\n    const cardsInDeck = getCardsForDeck(cards, deckId);\n    let countCards = cardsInDeck.length;\n    return (\n      <>\n        <span className=\"inline-edit\">\n          <Link to={`/deck/${deck.id}`}>\n            <h4>{deck.deck_name}</h4>\n          </Link>\n          {deck.description}\n        </span>\n        <p>No. of cards: {countCards}</p>\n        <button\n          onClick={(e) =>\n            this.setState({\n              editDeckId: deck.id,\n              nameInputValue: deck.deck_name,\n              descriptionInputValue: deck.description,\n            })\n          }\n        >\n          Edit\n        </button>\n      </>\n    );\n  }\n\n  renderEdit(deck) {\n    const initState = {\n      descriptionInputValue: \"\",\n      nameInputValue: \"\",\n      editDeckId: \"\",\n    };\n    const cards = this.props.cards;\n    const deckId = deck.id.toString();\n    const cardsInDeck = getCardsForDeck(cards, deckId);\n    let countCards = cardsInDeck.length;\n\n    return (\n      <>\n        <input\n          value={this.state.nameInputValue}\n          onChange={(e) => this.setState({ nameInputValue: e.target.value })}\n          className=\"inline-edit_input\"\n          name=\"edit-name\"\n          required\n        />\n        <input\n          defaultValue={this.state.descriptionInputValue}\n          onChange={(e) =>\n            this.setState({ descriptionInputValue: e.target.value })\n          }\n          className=\"inline-edit_input\"\n          name=\"edit description\"\n          required\n        />\n        <p>No. of cards: {countCards}</p>\n        {/* <p>{deck.created}</p> */}\n        {this.state.editDeckId === deck.id && (\n          <div className=\"editModeButtons\">\n            <button onClick={(e) => this.setState({ ...initState })}>\n              Cancel\n            </button>\n            <button onClick={(e) => this.handleSave(e)}>Save</button>\n            <button onClick={(e) => this.handleClickDelete(e)}>Delete</button>\n          </div>\n        )}\n      </>\n    );\n  }\n\n  render() {\n    let decks = this.context.decks;\n    return (\n      <section className=\"page\" id=\"viewDecks\">\n        <>\n          <h2>Your Decks</h2>\n          <p>Here are all of your decks!</p>\n          <h3>List of Decks</h3>\n          <ul>\n            {decks.map((deck) => (\n              <li key={deck.id}>\n                {deck.id === this.state.editDeckId ? (\n                  <div>{this.renderEdit(deck)}</div>\n                ) : (\n                  <div>{this.renderStandard(deck)}</div>\n                )}\n              </li>\n            ))}\n          </ul>\n          <Link to=\"/newdeck\">\n            <button className=\"add\">Add new Deck</button>\n          </Link>\n        </>{\" \"}\n      </section>\n    );\n  }\n}\n","import config from \"../config\";\n\nconst AuthService = {\n  postLogin(credentials) {\n    return fetch(`${config.API_ENDPOINT}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify(credentials),\n    }).then((res) =>\n      !res.ok ? res.json().then((e) => Promise.reject(e)) : res.json()\n    );\n  },\n  postUser(user) {\n    return fetch(`${config.API_ENDPOINT}/users`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify(user),\n    }).then((res) =>\n      !res.ok ? res.json().then((e) => Promise.reject(e)) : res.json()\n    );\n  },\n};\n\nexport default AuthService;\n","import React, { Component } from \"react\";\nimport TokenService from \"../Services/token-service\";\nimport AuthService from \"../Services/auth-service\";\n\nexport default class LoginForm extends Component {\n  static defaultProps = {\n    onLoginSuccess: () => {},\n  };\n  state = { error: null };\n\n  handleSubmitAuth = (ev) => {\n    ev.preventDefault();\n    this.setState({ error: null });\n    const userId = ev.target[\"login-userId\"].value;\n    const password = ev.target[\"login-password\"].value;\n    AuthService.postLogin({\n      user_name: userId,\n      password: password,\n    })\n      .then((res) => {\n        TokenService.saveAuthToken(res.authToken);\n        this.props.onLoginSuccess();\n      })\n      .catch((res) => {\n        this.setState({ error: res.error });\n      });\n  };\n\n  render() {\n    const { error } = this.state;\n    return (\n      <form className=\"login\" onSubmit={this.handleSubmitAuth}>\n        <div role=\"alert\">{error && <p className=\"red\">{error}</p>}</div>\n        <div className=\"user-id\">\n          <label htmlFor=\"login-userId\">UserName:</label>\n          <input\n            placeholder=\"User Name\"\n            type=\"text\"\n            name=\"user-name\"\n            id=\"login-userId\"\n          />\n        </div>\n        <div className=\"password\">\n          <label htmlFor=\"login-password\">Password:</label>\n          <input\n            placeholder=\"password\"\n            name=\"password\"\n            type=\"password\"\n            id=\"login-password\"\n          ></input>\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport LoginForm from \"./login-form\";\nimport { Link } from \"react-router-dom\";\nimport \"./landing-page.css\";\nimport CardContext from \"../card-context\";\n\nexport default class LandingPage extends Component {\n  static contextType = CardContext;\n  static defaultProps = {\n    location: {},\n    history: {\n      push: () => {},\n    },\n  };\n  handleLoginSuccess = () => {\n    const { location, history } = this.props;\n    const destination = (location.state || {}).from || \"/deck\";\n    history.push(destination);\n  };\n  render() {\n    return (\n      <div>\n        <section className=\"page\" id=\"landing\">\n          <h2>The Streamlined Flash Card System.</h2>\n          <p>\n            Use your notes that you have already created and quickly generate a\n            deck of cards.\n          </p>\n          <h3>Easy.</h3>\n          <p>\n            Simply copy and paste keywords or phrases with their definition.\n            Instantly creates a deck of flash cards to study with.\n          </p>\n          <h3>\n            Log in and pick up where you left off or{\" \"}\n            <Link to=\"/account\">Register</Link>\n          </h3>\n          <LoginForm onLoginSuccess={this.handleLoginSuccess} />\n          <br />\n        </section>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport TokenService from \"../../Services/token-service\";\nimport \"./header.css\";\n\nexport default class Header extends Component {\n  handleLogoutClick = () => {\n    TokenService.clearAuthToken();\n  };\n\n  renderLogoutLink() {\n    return (\n      <div className=\"logged-in\">\n        <Link onClick={this.handleLogoutClick} to=\"/\">\n          Logout\n        </Link>\n      </div>\n    );\n  }\n\n  renderLoginLink() {\n    return (\n      <div className=\"logged-out\">\n        <Link to=\"/account\">Register</Link>-<Link to=\"/\">Log in</Link>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <nav className=\"Header\">\n        <h1>\n          <Link to=\"/deck\"> Quick Card</Link>\n        </h1>\n        {TokenService.hasAuthToken()\n          ? this.renderLogoutLink()\n          : this.renderLoginLink()}\n      </nav>\n    );\n  }\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport TokenService from \"../Services/token-service\";\n\nexport default function PrivateRoute({ component, ...props }) {\n  const Component = component;\n  return (\n    <Route\n      {...props}\n      render={(componentProps) =>\n        TokenService.hasAuthToken() ? (\n          <Component {...componentProps} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/\",\n              state: { from: componentProps.location },\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport TokenService from \"../Services/token-service\";\n\nexport default function PublicRoute({ component, ...props }) {\n  const Component = component;\n  return (\n    <Route\n      {...props}\n      render={(componentProps) =>\n        TokenService.hasAuthToken() ? (\n          <Redirect to={\"/\"} />\n        ) : (\n          <Component {...componentProps} />\n        )\n      }\n    />\n  );\n}\n","import React, { Component } from \"react\";\nimport AuthService from \"../Services/auth-service\";\nimport \"./signup-form.css\";\n\nexport default class RegistrationForm extends Component {\n  handleSuccess = () => {\n    this.props.history.push(\"/\");\n  };\n\n  state = { error: null };\n\n  handleSubmit = (ev) => {\n    ev.preventDefault();\n    const { full_name, nick_name, user_name, password } = ev.target;\n    AuthService.postUser({\n      user_name: user_name.value,\n      password: password.value,\n      full_name: full_name.value,\n      nickname: nick_name.value,\n    })\n      .then((user) => {\n        full_name.value = \"\";\n        nick_name.value = \"\";\n        user_name.value = \"\";\n        password.value = \"\";\n        this.handleSuccess();\n      })\n      .catch((res) => {\n        this.setState({ error: res.error });\n      });\n  };\n\n  render() {\n    const { error } = this.state;\n    return (\n      <form\n        className=\"RegistrationForm, container\"\n        onSubmit={this.handleSubmit}\n      >\n        <h2>Register your account</h2>\n      <div role=\"alert\">{error && <p className=\"red\">{error}</p>}</div>\n        <div className=\"full_name\">\n          <label htmlFor=\"RegistrationForm__full_name\">Full name:</label>\n          <input\n            name=\"full_name\"\n            type=\"text\"\n            required\n            id=\"RegistrationForm__full_name\"\n          ></input>\n        </div>\n        <div className=\"user_name\">\n          <label htmlFor=\"RegistrationForm__user_name\">UserName:</label>\n          <input\n            name=\"user_name\"\n            type=\"text\"\n            required\n            id=\"RegistrationForm__user_name\"\n          ></input>\n        </div>\n        <div className=\"password\">\n          <label htmlFor=\"RegistrationForm__password\">Password:</label>\n          <input\n            name=\"password\"\n            type=\"password\"\n            required\n            id=\"RegistrationForm__password\"\n          ></input>\n        </div>\n        <div className=\"nick_name\">\n          <label htmlFor=\"RegistrationForm__nick_name\">Nickname:</label>\n          <input\n            name=\"nick_name\"\n            type=\"text\"\n            required\n            id=\"RegistrationForm__nick_name\"\n          ></input>\n        </div>\n        <button type=\"submit\">Register</button>\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nimport CardContext from \"../card-context\";\nimport NewDeck from \"../AddDeck/new-deck\";\nimport \"./App.css\";\nimport ViewCard from \"../ViewCards/view-cards\";\nimport config from \"../config\";\nimport ViewDecks from \"../ViewDecks/view-decks\";\nimport LandingPage from \"../LandingPage/landing-page\";\nimport Header from \"./Header/header\";\nimport TokenService from \"../Services/token-service\";\nimport PrivateRoute from \"../Routes/private-route\";\nimport PublicRoute from \"../Routes/public-route\";\nimport RegistrationForm from \"../LandingPage/signup-form\";\n\n\nclass App extends React.Component {\n  state = {\n    decks: [],\n    cards: [],\n  };\n\n  componentDidMount() {\n    TokenService.hasAuthToken() ? (\n\n    Promise.all([\n      fetch(`${config.API_ENDPOINT}/deck`, {\n        method: \"GET\",\n        headers: {\n          \"content-type\": \"application/json\",\n          authorization: `bearer ${TokenService.getAuthToken()}`,\n        },\n      }),\n      fetch(`${config.API_ENDPOINT}/card`, {\n        method: \"GET\",\n        headers: {\n          \"content-type\": \"application/json\",\n          authorization: `bearer ${TokenService.getAuthToken()}`,\n        },\n      }),\n    ])\n      .then(([deckRes, cardRes]) => {\n        if (!deckRes.ok) {\n          return deckRes.json().then((e) => Promise.reject(e));\n        }\n        if (!cardRes.ok) {\n          return cardRes.json().then((e) => Promise.reject(e));\n        }\n        return Promise.all([deckRes.json(), cardRes.json()]);\n      })\n      .then(([decks, cards]) => {\n        this.setState({ decks, cards });\n      }\n      )\n      .catch((error) => {\n        console.error({ error });\n      })\n          ) : (this.setState({\n            notes: [],\n            deck:[]\n          }))\n  }\n\n  handleCommitCards = (cards) => {\n    this.setState({\n      cards: [...this.state.cards, cards],\n    });\n  };\n\n  handleCommitDeck = (deck) => {\n    this.setState({\n      decks: [...this.state.decks, deck],\n    });\n  };\n\n  handleDeleteCard = (cardId) => {\n    this.setState({\n      cards: this.state.cards.filter((card) => card.id !== cardId),\n    });\n  };\n\n  handleDeleteDeck = (deckId) => {\n    this.setState({\n      decks: this.state.decks.filter((deck) => deck.id !== deckId),\n    });\n  };\n\n  handleUpdateDeck = (updatedDeck) => {\n    this.setState({\n      decks: this.state.decks.map((deck) =>\n        deck.id !== updatedDeck.id ? deck : updatedDeck\n      ),\n    });\n  };\n\n  handleUpdateCard = (updatedCard, cardId) => {\n    this.setState({\n      cards: this.state.cards.map((card) =>\n        card.id !== cardId ? card : updatedCard\n      ),\n    });\n  };\n\n  renderMain() {\n    return (\n      <>\n        <PrivateRoute path=\"/newdeck\" component={NewDeck} />\n        <PrivateRoute path=\"/deck/:deckId\" component={ViewCard} />\n        <PrivateRoute exact path=\"/deck\" component={ViewDecks} />\n        <PublicRoute exact path=\"/account\" component={RegistrationForm} />\n        <PublicRoute exact path=\"/\" component={LandingPage} />\n      </>\n    );\n  }\n\n  render() {\n    const context = {\n      decks: this.state.decks,\n      cards: this.state.cards,\n      commitCards: this.handleCommitCards,\n      commitDeck: this.handleCommitDeck,\n      deleteCard: this.handleDeleteCard,\n      deleteDeck: this.handleDeleteDeck,\n      updateDeck: this.handleUpdateDeck,\n      updateCard: this.handleUpdateCard,\n    };\n    return (\n      <CardContext.Provider value={context}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Header />\n          </header>\n          <main className=\"AppMain\">{this.renderMain()}</main>\n        </div>\n      </CardContext.Provider>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}