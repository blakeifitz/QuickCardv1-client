{"version":3,"sources":["card-context.js","page-parse.js","config.js","new-deck.js","ViewCards/flashcard.js","misc-functions.js","ViewCards/view-cards.js","ViewDecks/view-decks.js","App/App.js","reportWebVitals.js","index.js"],"names":["CardContext","React","createContext","notes","decks","cards","commitCards","commitDeck","deleteDeck","deleteCard","updateDeck","updateCard","PageParse","deckId","splitSymbol","keywords","split","filter","note","map","slice","definitions","keyword","pop","definition","card","i","length","deck","Object","values","indexOf","push","NewDeck","process","REACT_APP_API_KEY","handleSubmit","e","preventDefault","newNotes","target","value","deckName","description","deck_name","created","Date","setState","errorMessage","fetch","config","method","headers","body","JSON","stringify","then","deckRes","ok","json","Promise","reject","res","id","context","forEach","cardRes","console","log","props","history","catch","error","state","this","onSubmit","htmlFor","onClick","Component","contextType","Flashcard","handleDelete","CardId","parseFloat","editCardId","handleSave","keywordInputValue","definitionInputValue","updatedCard","showAnswer","cardNumber","initState","onChange","className","name","required","renderEdit","renderStandard","defaultProps","getCardsForDeck","toString","ViewCard","match","params","getDeckFromId","getCurrentCard","nextCard","handleNext","handleBack","ViewDecks","editDeckId","nameInputValue","descriptionInputValue","updatedDeck","handleClickDelete","countCards","Link","to","defaultValue","App","handleCommitCards","handleCommitDeck","handleDeleteCard","cardId","handleDeleteDeck","handleUpdateDeck","handleUpdateCard","all","Route","path","component","exact","Provider","renderMain","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","BrowserRouter","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bbb6570.chunk.js","sourcesContent":["import React from 'react';\n\nconst CardContext = React.createContext({\n    notes:\"\",\n    decks: [],\n    cards:[],\n    commitCards: () => {},\n    commitDeck: () => {},\n    deleteDeck: () => {},\n    deleteCard: () => {},\n    updateDeck: () => {},\n    updateCard: () => {},\n})\n\nexport default CardContext","export const PageParse = (notes = [], deckId, splitSymbol) => {\n  //Split at line return\n\n  notes = notes.split(/\\r?\\n/);\n\n  //Filter out empty string from line return\n  notes = notes.filter((note) => note !== \"\");\n\n  //Go through each item in the array and split at the symbol.\n  notes = notes.map((note) => note.split(splitSymbol));\n\n  //Slice Keyword and definition into separate arrays\n  let keywords = notes.map((note) => note.slice(0, 1));\n\n  let definitions = notes.map((note) => note.slice(1, 2));\n  //Get value from popped\n\n  keywords = keywords.map((keyword) => keyword.pop());\n\n  definitions = definitions.map((definition) => definition.pop());\n  //Mash into shape\n\n  let card = {};\n  let cards = [];\n  for (var i = 0; i < keywords.length; i++) {\n    card = {\n      deck: deckId,\n      keyword: keywords[i],\n      definition: definitions[i],\n    };\n    //only push cards without undefined values\n    //TODO use typeOf to ensure people can use the string \"undefined\"\n    if (Object.values(card).indexOf(undefined || \"\") === -1) {\n    cards.push(card)\n    }\n  }\n\nif(cards.length !== 0){\nreturn cards\n}else{ \n  return null\n}\n};\n","\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n    API_ENDPOINT: `http://localhost:8000/api`,\n    API_KEY: process.env.REACT_APP_API_KEY,\n  }","import React from \"react\";\nimport CardContext from \"./card-context\";\nimport { PageParse } from \"./page-parse\";\nimport config from \"./config\";\n\nexport default class NewDeck extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      errorMessage: 0,\n    };\n  }\n  static contextType = CardContext;\n \n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let newNotes = e.target[\"notes\"].value;\n    let deckName = e.target[\"deckName\"].value;\n    let description = e.target[\"deckDescription\"].value;\n    let splitSymbol = e.target[\"symbol-select\"].value;\n\n    const deck = {\n      deck_name: deckName,\n      description: description,\n      created: new Date(),\n    };\n\n    let cards = PageParse(newNotes, 0, splitSymbol);\n\n    if(!cards){\n        return this.setState({ errorMessage: 1})\n    }else{\n    \n    fetch(`${config.API_ENDPOINT}/deck`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n      body: JSON.stringify(deck),\n    })\n            //If resolve is not okay return the json error and reject promis\n      .then((deckRes) => {\n        if (!deckRes.ok) return deckRes.json().then((e) => Promise.reject(e));\n        return deckRes.json();\n      })\n\n            //cards get deckID from response from api after adding the deck\n      .then((res) => {\n        cards = PageParse(newNotes, res.id, splitSymbol);\n        deck.id = res.id;\n        this.context.commitDeck(deck)\n        cards.forEach(card =>\n        fetch(`${config.API_ENDPOINT}/card`, {\n          method: \"POST\",\n          headers: {\n            \"content-type\": \"application/json\",\n          },\n          body: JSON.stringify(card),\n\n          //check card resolve\n        }).then((cardRes) => {\n          if (!cardRes.ok) return cardRes.json().then((e) => Promise.reject(e));\n          return cardRes.json() ;\n        })\n        .then((res)=>{\n          console.log(res)\n          this.context.commitCards(res);\n        })\n        );\n\n          //after the data is given to server commit to state\n        this.props.history.push(\"/deck\");\n      })\n      .then((res)=> {\n       console.log(res)\n      }\n      )\n      .catch((error) => {\n        console.error({ error });\n      })};\n  };\n  render() {\n    return (\n      <div>\n        {(this.state.errorMessage) !== 0 && <p>Please add valid notes to deck</p>}\n        <h2>Add Deck</h2>\n        <form onSubmit={this.handleSubmit}>\n          <br />\n          <label htmlFor=\"deckName\">Enter Deck Name</label>\n          <br />\n          <input id=\"deckName\" />\n          <br />\n          <label htmlFor=\"notes\">Insert notes</label>\n          <br />\n          <textarea id=\"notes\"></textarea>\n          <br />\n          <label htmlFor=\"deckDescription\">Describe Deck</label>\n          <br />\n          <input id=\"deckDescription\"></input>\n          <label htmlFor=\"note-folder-select\">Split Symbol</label>\n        <select id=\"symbol-select\">\n\n          <option value=':'>:</option>\n          <option value='-'>-</option>\n          <option value='/'>/</option>\n    \n        </select>\n        <br />\n        [placeholder for screenshots to clarify Split Symbol]\n        <br />\n\n          <button>Submit</button>\n        </form>\n        <button onClick={() => this.props.history.push(\"/deck\")}>Cancel</button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport CardContext from '../card-context';\nimport config from '../config';\nimport './flashcard.css';\nexport default class Flashcard extends React.Component{\n  constructor(props) {\n    super(props);\n\n    //setting up state to facilitate editing\n\n    this.state = {\n      definitionInputValue: \"\",\n      keywordInputValue: \"\",\n      editCardId: \"\",\n    };\n  }\n   static contextType = CardContext;\n\nhandleDelete = (e) =>{\n  e.preventDefault();\n  const CardId = parseFloat(this.state.editCardId);\n  fetch(`${config.API_ENDPOINT}/card/${CardId}`, {\n    method: \"DELETE\",\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n  })\n  .then((res) => {\n    if(!res.ok){\n      return res.json().then((e)=> Promise.reject(e));\n    }\n  })\n  .then(() =>{\n   this.context.deleteCard(CardId);\n  })\n  .catch((error) =>{\n    console.error({ error });\n  });\n  \n}\n\n     handleSave = (e) => {\n    e.preventDefault();\n    const keyword = this.state.keywordInputValue;\n    const definition = this.state.definitionInputValue;\n    const CardId = parseFloat(this.state.editCardId);\n    let id = CardId;\n    let deck = this.props.deck;\n    const updatedCard = {id, keyword, definition, deck  };\n    fetch(`${config.API_ENDPOINT}/Card/${CardId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(updatedCard),\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (!res.ok)\n         return res.json().then((error) => Promise.reject(error));\n      })\n      .then(() => {\n        this.context.updateCard(updatedCard, CardId);\n        this.setState({\n          editCardId: \"\",\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n    renderStandard(card){\n      return(!this.props.showAnswer ?<div>\n        <br/>\n        <h4>Word/Phrase:</h4><p>{card.keyword ? card.keyword : \"\" }</p>\n        <p>{card.cardNumber}</p>\n        <br/>\n        <button\n  onClick={(e) =>\n    this.setState({\n      editCardId: card.id,\n      keywordInputValue: card.keyword,\n      definitionInputValue: card.definition,\n      \n    })\n  }\n>\n  Edit\n</button>\n    </div> \n  :   <div><h4>Definition:</h4><p>{card.definition}</p>\n  <p>{card.cardNumber}</p>\n  <button\n  onClick={(e) =>\n    this.setState({\n      editCardId: card.id,\n      keywordInputValue: card.keyword,\n      definitionInputValue: card.definition,\n      \n    })\n  }\n>\n  Edit\n</button>\n</div>\n      )\n    }\n  renderEdit(card){\n    const initState ={\n      definitionInputValue: \"\",\n      keywordInputValue: \"\",\n      editCardId: \"\",\n    };\n    return(\n    <>\n    <div>\n      <br/>\n      <h4>Word/Phrase:</h4><p>    <input\nvalue={this.state.keywordInputValue}\nonChange={(e) => this.setState({ keywordInputValue: e.target.value })}\nclassName=\"inline-edit_input\"\nname=\"edit-name\"\nrequired\n/></p>\n      <p>edit</p>\n      <br/>\n  </div> \n   <div><h4>Definition:</h4>      <textarea\nvalue={this.state.definitionInputValue}\nonChange={(e) => this.setState({ definitionInputValue: e.target.value })}\nclassName=\"inline-edit_input\"\nname=\"edit-name\"\n\nrequired\n/>\n<p>edit</p>\n<button onClick={(e) => this.setState({ ...initState })}>\n              Cancel\n            </button>\n            <button onClick={(e) => this.handleDelete(e)}>Delete</button></div>\n            </>\n    )\n  }\n\n\n    render(){\n      let card = this.props.card\n        return(\n         <>\n            <div className='flashcard-box'>\n              {card.id === this.state.editCardId ? (\n                <div>{this.renderEdit(card)}</div>\n              ) : (\n                <div>{this.renderStandard(card)}</div>\n              )}\n                <button onClick={() => (this.props.history.push)(\"/deck\")}>Exit Deck</button>\n                <button onClick={(e) => this.handleSave(e)}>Save</button>\n            </div>\n        </>\n        );\n    }\n}\nFlashcard.defaultProps = {\n  card: [\n    {\n      keyword: '',\n      definition:'',\n      cardNumber:1,\n    }\n  ]\n  }","\n\nexport const getCardsForDeck = (cards = [], deckId) => {\n      cards = cards.filter(card => card.deck.toString() === deckId)\n      cards.map((card, i) => (card.cardNumber = i + 1))\n      return cards\n}\n\nexport const getDeckFromId = (deckId, decks) =>{\n    return (\n        decks.filter(deck => deck === deckId)\n    )\n}\n\n","import React from 'react';\nimport CardContext from '../card-context';\nimport Flashcard from './flashcard';\nimport {getCardsForDeck, getDeckFromId} from '../misc-functions'\n\nexport default class ViewCard extends React.Component{\n    constructor() {\n        super();\n    \n        this.state = {\n          showAnswer: false,\n          cardNumber: 1\n        }\n      }\n      \n    static contextType = CardContext;\n\nhandleNext(e){\n  e.preventDefault()\n  return this.setState({\n    cardNumber: this.state.cardNumber +1\n  })\n}\n\nhandleBack(e){\n  e.preventDefault()\n    this.setState({cardNumber: this.state.cardNumber - 1});\n}\n\n    getCurrentCard(){\n       const cards = this.context.cards;\n       const {deckId} = this.props.match.params;\n       const cardsInDeck = getCardsForDeck(cards, deckId);\nlet currentCard = cardsInDeck.filter(card => card.cardNumber === this.state.cardNumber)\n      \n      return currentCard[0]\n\n      \n    } \n\n\n    render(){\n\n        const decks = this.context.decks;\n        const {deckId} = this.props.match.params;\n        const  cards = getCardsForDeck(this.context.cards, deckId);\n        const deck = getDeckFromId(deckId, decks)\n        return(\n         <>\n         <h2>{deck.name}</h2>\n         <div\n         onClick={ () => {\n          this.setState({showAnswer: !this.state.showAnswer});\n        }}>\n        <Flashcard\n        card={this.getCurrentCard()}\n        history={this.props.history}\n        nextCard={this.handleNext}\n        showAnswer={this.state.showAnswer}\n        deck={deckId} />\n        </div>\n        {this.state.cardNumber < cards.length &&\n        <button onClick={(e) => this.handleNext(e)}>Next</button>}\n        {this.state.cardNumber > 1 &&\n        <button onClick={(e) => this.handleBack(e)}>Back</button>}\n\n\n        </>\n        );\n    }\n}\n","import React from \"react\";\nimport CardContext from \"../card-context\";\nimport { Link } from \"react-router-dom\";\nimport config from \"../config\";\nimport \"./view-decks.css\";\nimport { getCardsForDeck } from \"../misc-functions\";\n\nexport default class ViewDecks extends React.Component {\n  constructor(props) {\n    super(props);\n\n    //setting up state to facilitate editing\n\n    this.state = {\n      descriptionInputValue: \"\",\n      nameInputValue: \"\",\n      editDeckId: \"\",\n    };\n  }\n  static contextType = CardContext;\n\n  handleSave = (e) => {\n    e.preventDefault();\n    const id = this.state.editDeckId;\n    const deck_name = this.state.nameInputValue;\n    const description = this.state.descriptionInputValue;\n    const deckId = parseFloat(this.state.editDeckId);\n    const updatedDeck = { id, deck_name, description };\n    fetch(`${config.API_ENDPOINT}/deck/${deckId}`, {\n      method: \"PATCH\",\n      body: JSON.stringify(updatedDeck),\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (!res.ok) return res.json().then((error) => Promise.reject(error));\n      })\n      .then(() => {\n        this.context.updateDeck(updatedDeck);\n        this.setState({\n          editDeckId: \"\",\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  handleClickDelete = (e) => {\n    e.preventDefault();\n    const deckId = parseFloat(this.state.editDeckId);\n    fetch(`${config.API_ENDPOINT}/deck/${deckId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"content-type\": \"application/json\",\n      },\n    })\n      .then((res) => {\n        if (!res.ok) {\n          return res.json().then((e) => Promise.reject(e));\n        }\n      })\n      .then(() => {\n        this.context.deleteDeck(deckId);\n        let { cards = [] } = this.context;\n        cards = getCardsForDeck(cards, deckId);\n        cards.forEach((card) => {\n          this.context.deleteCard(card.id);\n        });\n      })\n      .catch((error) => {\n        console.error({ error });\n      });\n  };\n  renderStandard(deck) {\n    const cards = this.context.cards;\n    const deckId = deck.id.toString()\n    const cardsInDeck = getCardsForDeck(cards, deckId);\n   let countCards = cardsInDeck.length\n    return (\n      <>\n        <span className=\"inline-edit\">\n          <Link to={`/deck/${deck.id}`}>\n            <h4>{deck.deck_name}</h4>\n          </Link>\n          {deck.description}\n        </span>\n        <p>No. of cards: {countCards}</p>\n        {/* <p>{deck.created}</p> */}\n        <button\n          onClick={(e) =>\n            this.setState({\n              editDeckId: deck.id,\n              nameInputValue: deck.deck_name,\n              descriptionInputValue: deck.description,\n            })\n          }\n        >\n          Edit\n        </button>\n      </>\n    );\n  }\n\n  renderEdit(deck) {\n    const initState = {\n      descriptionInputValue: \"\",\n      nameInputValue: \"\",\n      editDeckId: \"\",\n    };\n    const cards = this.context.cards;\n    const deckId = deck.id.toString()\n    const cardsInDeck = getCardsForDeck(cards, deckId);\n   let countCards = cardsInDeck.length\n    return (\n      <>\n        <input\n          value={this.state.nameInputValue}\n          onChange={(e) => this.setState({ nameInputValue: e.target.value })}\n          className=\"inline-edit_input\"\n          name=\"edit-name\"\n          required\n        />\n        <input\n          defaultValue={this.state.descriptionInputValue}\n          onChange={(e) =>\n            this.setState({ descriptionInputValue: e.target.value })\n          }\n          className=\"inline-edit_input\"\n          name=\"edit description\"\n          required\n        />\n        <p>No. of cards: {countCards}</p>\n        {/* <p>{deck.created}</p> */}\n        {this.state.editDeckId === deck.id && (\n          <div className=\"editModeButtons\">\n            <button onClick={(e) => this.setState({ ...initState })}>\n              Cancel\n            </button>\n            <button onClick={(e) => this.handleSave(e)}>Save</button>\n            <button onClick={(e) => this.handleClickDelete(e)}>Delete</button>\n          </div>\n        )}\n      </>\n    );\n  }\n\n  render() {\n    let decks = this.context.decks;\n    return (\n      <section className=\"page\" id=\"viewDecks\">\n        <>\n          <h2>Your Decks</h2>\n          <p>Here are all of your decks!</p>\n          <h3>List of Decks</h3>\n          <ul>\n            {decks.map((deck) => (\n              <li key={deck.id}>\n                {deck.id === this.state.editDeckId ? (\n                  <div>{this.renderEdit(deck)}</div>\n                ) : (\n                  <div>{this.renderStandard(deck)}</div>\n                )}\n              </li>\n            ))}\n          </ul>\n          <Link to=\"/newdeck\">\n            <button className=\"add\">Add new Deck</button>\n          </Link>\n        </>{\" \"}\n      </section>\n    );\n  }\n}\n","import React from \"react\";\nimport { Route, Link } from \"react-router-dom\";\nimport CardContext from \"../card-context\";\nimport NewDeck from \"../new-deck\";\nimport \"./App.css\";\nimport ViewCard from \"../ViewCards/view-cards\";\nimport config from \"../config\";\nimport ViewDecks from \"../ViewDecks/view-decks\";\n\nclass App extends React.Component {\n  state = {\n    decks: [],\n    cards: [],\n  };\n\n\n\n  componentDidMount() {\n    Promise.all([\n      fetch(`${config.API_ENDPOINT}/deck`),\n      fetch(`${config.API_ENDPOINT}/card`),\n    ]).then(([deckRes, cardRes]) => {\n      if (!deckRes.ok) {\n        return deckRes.json().then((e) => Promise.reject(e));\n      }\n      if (!cardRes.ok) {\n        return cardRes.json().then((e) => Promise.reject(e));\n      }\n      return Promise.all([deckRes.json(), cardRes.json()]);\n    })\n    .then(([decks, cards]) => {\n      this.setState({ decks, cards});\n    })\n    .catch((error) => {\n     console.error({ error })\n    })\n  }\n\n  handleCommitCards = (cards) => {\n    this.setState({\n      cards: [...this.state.cards, cards],\n    });\n  };\n\n  handleCommitDeck = (deck) => {\n    this.setState({\n      decks: [...this.state.decks, deck],\n    });\n  };\n\n  handleDeleteCard = (cardId) => {\n    this.setState({\n      cards: this.state.cards.filter((card) => card.id !== cardId),\n    });\n  };\n\n  handleDeleteDeck = (deckId) => {\n    this.setState({\n      decks: this.state.decks.filter((deck) => deck.id !== deckId),\n    });\n  };\n\n  handleUpdateDeck = (updatedDeck) => {\n    this.setState({\n      decks: this.state.decks.map(deck => \n        (deck.id !== updatedDeck.id) ? deck : updatedDeck\n      )\n    })\n  }\n\n  handleUpdateCard = (updatedCard, cardId) => {\n    this.setState({\n      cards: this.state.cards.map(card => \n        (card.id !== cardId) ? card : updatedCard\n      )\n    })\n  }\n\n  renderMain() {\n    return (\n      <>\n        <Route path=\"/newdeck\" component={NewDeck} />\n        <Route path=\"/deck/:deckId\" component={ViewCard} />\n        <Route exact path=\"/deck\" component={ViewDecks} />\n      </>\n    );\n  }\n\n  render() {\n    const context = {\n      decks: this.state.decks,\n      cards: this.state.cards,\n      commitCards: this.handleCommitCards,\n      commitDeck: this.handleCommitDeck,\n      deleteCard: this.handleDeleteCard,\n      deleteDeck: this.handleDeleteDeck,\n      updateDeck: this.handleUpdateDeck,\n      updateCard: this.handleUpdateCard,\n    };\n    return (\n      <CardContext.Provider value={context}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Link to=\"/deck\">\n              <h1>Quick Card</h1>\n            </Link>\n          </header>\n          <main className=\"AppMain\">{this.renderMain()}</main>\n        </div>\n      </CardContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}