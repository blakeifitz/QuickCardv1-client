{"version":3,"sources":["card-context.js","AddDeck/page-parse.js","config.js","Services/token-service.js","AddDeck/notes-ss.png","AddDeck/new-deck.js","ViewCards/flashcard.js","misc-functions.js","ViewCards/view-cards.js","ViewDecks/render-decks.js","ViewDecks/view-decks.js","Services/auth-service.js","LandingPage/login-form.js","LandingPage/landing-page.js","App/Header/header.js","Routes/private-route.js","Routes/public-route.js","LandingPage/signup-form.js","App/App.js","reportWebVitals.js","index.js"],"names":["CardContext","React","createContext","notes","decks","cards","getDecks","commitCards","commitDeck","deleteDeck","deleteCard","updateDeck","updateCard","PageParse","deckId","splitSymbol","keywords","split","filter","note","map","slice","definitions","keyword","pop","definition","card","i","length","deck","Object","values","indexOf","push","process","REACT_APP_API_KEY","TokenService","saveAuthToken","token","window","localStorage","setItem","config","getAuthToken","getItem","clearAuthToken","removeItem","hasAuthToken","makebearerAuthToken","userId","password","btoa","NewDeck","Component","constructor","super","handleSubmit","e","preventDefault","newNotes","target","value","deckName","description","deck_name","created","Date","this","setState","errorMessage","fetch","method","headers","authorization","body","JSON","stringify","then","deckRes","ok","json","Promise","reject","res","id","context","forEach","cardRes","props","history","catch","error","console","state","render","className","src","notesSS","alt","onSubmit","htmlFor","placeholder","onClick","contextType","Flashcard","handleDelete","CardId","parseFloat","editCardId","handleSave","keywordInputValue","definitionInputValue","updatedCard","renderStandard","showAnswer","cardNumber","renderEdit","initState","onChange","name","required","defaultProps","getCardsForDeck","toString","ViewCard","handleNext","handleBack","getCurrentCard","match","params","nextCard","RenderDecks","editDeckId","nameInputValue","descriptionInputValue","updatedDeck","handleClickDelete","countCards","Link","to","defaultValue","ViewDecks","componentDidMount","AuthService","postLogin","credentials","postUser","user","LoginForm","handleSubmitAuth","ev","user_name","authToken","onLoginSuccess","role","autoComplete","type","LandingPage","handleLoginSuccess","location","destination","from","Header","handleLogoutClick","renderLogoutLink","renderLoginLink","PrivateRoute","component","Route","componentProps","Redirect","pathname","PublicRoute","RegistrationForm","handleSuccess","full_name","nick_name","nickname","App","handleGetDecks","all","handleCommitCards","handleCommitDeck","handleDeleteCard","cardId","handleDeleteDeck","handleUpdateDeck","handleUpdateCard","renderMain","path","exact","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.72bde07d.chunk.js","sourcesContent":["import React from 'react';\n\nconst CardContext = React.createContext({\n  notes: '',\n  decks: [],\n  cards: [],\n  getDecks: () => {},\n  commitCards: () => {},\n  commitDeck: () => {},\n  deleteDeck: () => {},\n  deleteCard: () => {},\n  updateDeck: () => {},\n  updateCard: () => {},\n});\n\nexport default CardContext;\n","export const PageParse = (notes = [], deckId, splitSymbol) => {\n  //Split at line return\n\n  notes = notes.split(/\\r?\\n/);\n\n  //Filter out empty string from line return\n  notes = notes.filter((note) => note !== '');\n\n  //Go through each item in the array and split at the symbol.\n  notes = notes.map((note) => note.split(splitSymbol));\n\n  //Slice Keyword and definition into separate arrays\n  let keywords = notes.map((note) => note.slice(0, 1));\n\n  let definitions = notes.map((note) => note.slice(1, 2));\n  //Get value from popped\n\n  keywords = keywords.map((keyword) => keyword.pop());\n\n  definitions = definitions.map((definition) => definition.pop());\n  //Mash into shape\n\n  let card = {};\n  let cards = [];\n  for (var i = 0; i < keywords.length; i++) {\n    card = {\n      deck: deckId,\n      keyword: keywords[i],\n      definition: definitions[i],\n    };\n    //only push cards without undefined values to weed out misformatted and accidental cards\n    //TODO use typeOf to ensure people can use the string \"undefined\"\n    if (Object.values(card).indexOf(undefined || '') === -1) {\n      cards.push(card);\n    }\n  }\n\n  if (cards.length !== 0) {\n    return cards;\n  } else {\n    return null;\n  }\n};\n","export default {\n  API_ENDPOINT: 'https://quickcardv1-api.herokuapp.com/api',\n  API_KEY: process.env.REACT_APP_API_KEY,\n  TOKEN_KEY: 'quickcard-client-auth-token',\n};\n","import config from '../config';\n\nconst TokenService = {\n  saveAuthToken(token) {\n    window.localStorage.setItem(config.TOKEN_KEY, token);\n  },\n  getAuthToken() {\n    return window.localStorage.getItem(config.TOKEN_KEY);\n  },\n  clearAuthToken() {\n    window.localStorage.removeItem(config.TOKEN_KEY);\n  },\n  hasAuthToken() {\n    return !!TokenService.getAuthToken();\n  },\n  makebearerAuthToken(userId, password) {\n    return window.btoa(`${userId}:${password}`);\n  },\n};\n\nexport default TokenService;\n","export default __webpack_public_path__ + \"static/media/notes-ss.6e67e0ee.png\";","import React from 'react';\nimport CardContext from '../card-context';\nimport { PageParse } from './page-parse';\nimport config from '../config';\nimport TokenService from '../Services/token-service';\nimport './new-deck.css';\nimport notesSS from './notes-ss.png';\n\nexport default class NewDeck extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      errorMessage: 0,\n    };\n  }\n  static contextType = CardContext;\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let newNotes = e.target['notes'].value;\n    let deckName = e.target['deckName'].value;\n    let description = e.target['deckDescription'].value;\n    let splitSymbol = e.target['symbol-select'].value;\n\n    const deck = {\n      deck_name: deckName,\n      description: description,\n      created: new Date(),\n    };\n\n    let cards = PageParse(newNotes, 0, splitSymbol);\n\n    if (!cards) {\n      return this.setState({ errorMessage: 1 });\n    } else {\n      fetch(`${config.API_ENDPOINT}/deck`, {\n        method: 'POST',\n        headers: {\n          authorization: `bearer ${TokenService.getAuthToken()}`,\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(deck),\n      })\n        .then((deckRes) => {\n          if (!deckRes.ok) return deckRes.json().then((e) => Promise.reject(e));\n          return deckRes.json();\n        })\n\n        //cards get deckID from response from api after adding the deck\n        .then((res) => {\n          cards = PageParse(newNotes, res.id, splitSymbol);\n          deck.id = res.id;\n          this.context.commitDeck(deck);\n          cards.forEach((card) =>\n            fetch(`${config.API_ENDPOINT}/card`, {\n              method: 'POST',\n              headers: {\n                'content-type': 'application/json',\n                authorization: `bearer ${TokenService.getAuthToken()}`,\n              },\n              body: JSON.stringify(card),\n            })\n              .then((cardRes) => {\n                if (!cardRes.ok)\n                  return cardRes.json().then((e) => Promise.reject(e));\n                return cardRes.json();\n              })\n              .then((res) => {\n                this.context.commitCards(res);\n              })\n          );\n\n          this.props.history.push('/deck');\n        })\n        .catch((error) => {\n          console.error({ error });\n        });\n    }\n  };\n  render() {\n    return (\n      <section className=\"page\">\n        {this.state.errorMessage !== 0 && <p>Please add valid notes to deck</p>}\n        <h2>Add Deck</h2>\n\n        <p>\n          Copy and paste your keywords/definition pairs separated by a line\n          return.\n        </p>\n        <figure>\n          <img\n            src={notesSS}\n            alt=\"screenshot of notes\"\n            className=\"inline_ss\"\n          ></img>\n          <figcaption>Example of note structure</figcaption>\n        </figure>\n\n        <form onSubmit={this.handleSubmit}>\n          <br />\n          <label htmlFor=\"deckName\">Enter Deck Name</label>\n          <br />\n          <input placeholder=\"Name of Deck\" id=\"deckName\" />\n          <br />\n          <label htmlFor=\"notes\">Insert notes</label>\n          <br />\n          <textarea\n            placeholder='Example:\"NPX: Allows for running a one time command as if it was global.\"(Separate cards by line return)'\n            id=\"notes\"\n          ></textarea>\n          <br />\n          <label htmlFor=\"deckDescription\">Describe Deck</label>\n          <br />\n          <input\n            placeholder=\"What is the deck for?\"\n            id=\"deckDescription\"\n          ></input>\n\n          <label htmlFor=\"symbol-select\">Split Symbol</label>\n          <select id=\"symbol-select\">\n            <option value=\":\">:</option>\n            <option value=\"?\">?</option>\n            <option value=\"-\">-</option>\n            <option value=\"/\">/</option>\n          </select>\n          <br />\n          <br />\n          <div className=\"button_group\">\n            <button>Submit</button>\n            <button onClick={() => this.props.history.push('/deck')}>\n              Cancel\n            </button>\n          </div>\n        </form>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport CardContext from '../card-context';\nimport config from '../config';\nimport TokenService from '../Services/token-service';\nimport './flashcard.css';\nexport default class Flashcard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      definitionInputValue: '',\n      keywordInputValue: '',\n      editCardId: '',\n    };\n  }\n  static contextType = CardContext;\n\n  handleDelete = (e) => {\n    e.preventDefault();\n    const CardId = parseFloat(this.state.editCardId);\n    fetch(`${config.API_ENDPOINT}/card/${CardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: `bearer ${TokenService.getAuthToken()}`,\n        'content-type': 'application/json',\n      },\n    })\n      .then((res) => {\n        if (!res.ok) {\n          return res.json().then((e) => Promise.reject(e));\n        }\n      })\n      .then(() => {\n        this.context.deleteCard(CardId);\n      })\n      .catch((error) => {\n        console.error({ error });\n      });\n  };\n\n  handleSave = (e) => {\n    e.preventDefault();\n    const keyword = this.state.keywordInputValue;\n    const definition = this.state.definitionInputValue;\n    const CardId = parseFloat(this.state.editCardId);\n    let id = CardId;\n    let deck = this.props.deck;\n    const updatedCard = { id, keyword, definition, deck };\n    fetch(`${config.API_ENDPOINT}/Card/${CardId}`, {\n      method: 'PATCH',\n      body: JSON.stringify(updatedCard),\n      headers: {\n        authorization: `bearer ${TokenService.getAuthToken()}`,\n        'content-type': 'application/json',\n      },\n    })\n      .then((res) => {\n        if (!res.ok) return res.json().then((error) => Promise.reject(error));\n      })\n      .then(() => {\n        this.context.updateCard(updatedCard, CardId);\n        this.setState({\n          editCardId: '',\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  renderStandard(card) {\n    return !this.props.showAnswer ? (\n      <div className=\"content-wrapper\">\n        <p>{card.cardNumber}</p>\n        <h4>Word/Phrase:</h4>\n        <p>{card.keyword ? card.keyword : ''}</p>\n        <h4>Click to Flip</h4>\n        <div className=\"button_group\">\n          <button\n            onClick={(e) =>\n              this.setState({\n                editCardId: card.id,\n                keywordInputValue: card.keyword,\n                definitionInputValue: card.definition,\n              })\n            }\n          >\n            Edit\n          </button>\n          <button onClick={() => this.props.history.push('/deck')}>\n            Exit Deck\n          </button>\n        </div>\n      </div>\n    ) : (\n      <div className=\"content-wrapper\">\n        <p>{card.cardNumber}</p>\n        <h4>Definition:</h4>\n        <p>{card.definition}</p>\n        <h4>Click to Flip</h4>\n        <div className=\"button_group\">\n          <button\n            onClick={(e) =>\n              this.setState({\n                editCardId: card.id,\n                keywordInputValue: card.keyword,\n                definitionInputValue: card.definition,\n              })\n            }\n          >\n            Edit\n          </button>\n          <button onClick={() => this.props.history.push('/deck')}>\n            Exit Deck\n          </button>\n        </div>\n      </div>\n    );\n  }\n  renderEdit(card) {\n    const initState = {\n      definitionInputValue: '',\n      keywordInputValue: '',\n      editCardId: '',\n    };\n    return (\n      <>\n        <div>\n          <br />\n          <h4>Word/Phrase:</h4>\n          <p>\n            {' '}\n            <input\n              value={this.state.keywordInputValue}\n              onChange={(e) =>\n                this.setState({ keywordInputValue: e.target.value })\n              }\n              className=\"inline-edit_input\"\n              name=\"edit-name\"\n              required\n            />\n          </p>\n          <br />\n        </div>\n        <div>\n          <h4>Definition:</h4>{' '}\n          <textarea\n            value={this.state.definitionInputValue}\n            onChange={(e) =>\n              this.setState({ definitionInputValue: e.target.value })\n            }\n            className=\"inline-edit_input\"\n            name=\"edit-name\"\n            required\n          />\n          <div className=\"button_group\">\n            <button onClick={(e) => this.setState({ ...initState })}>\n              Cancel\n            </button>\n            <button onClick={(e) => this.handleSave(e)}>Save</button>\n            <button onClick={(e) => this.handleDelete(e)}>Delete</button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    let card = this.props.card;\n    return (\n      <div className=\"flashcard-box\">\n        {card.id === this.state.editCardId ? (\n          <div>{this.renderEdit(card)}</div>\n        ) : (\n          <div>{this.renderStandard(card)}</div>\n        )}\n      </div>\n    );\n  }\n}\nFlashcard.defaultProps = {\n  card: [\n    {\n      keyword: '',\n      definition: '',\n      cardNumber: 1,\n    },\n  ],\n};\n","export const getCardsForDeck = (cards = [], deckId) => {\n  cards = cards.filter((card) => card.deck.toString() === deckId);\n  cards.map((card, i) => (card.cardNumber = i + 1));\n  return cards;\n};\n\nexport const getDeckFromId = (deckId, decks) => {\n  return decks.filter((deck) => deck === deckId);\n};\n","import React from 'react';\nimport CardContext from '../card-context';\nimport Flashcard from './flashcard';\nimport { getCardsForDeck } from '../misc-functions';\nimport './view-cards.css';\n\nexport default class ViewCard extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      showAnswer: false,\n      cardNumber: 1,\n    };\n  }\n\n  static contextType = CardContext;\n\n  handleNext(e) {\n    e.preventDefault();\n    return this.setState({\n      cardNumber: this.state.cardNumber + 1,\n    });\n  }\n\n  handleBack(e) {\n    e.preventDefault();\n    this.setState({ cardNumber: this.state.cardNumber - 1 });\n  }\n\n  getCurrentCard() {\n    const cards = this.context.cards;\n    const { deckId } = this.props.match.params;\n    const cardsInDeck = getCardsForDeck(cards, deckId);\n    let currentCard = cardsInDeck.filter(\n      (card) => card.cardNumber === this.state.cardNumber\n    );\n\n    return currentCard[0];\n  }\n\n  render() {\n    const { deckId } = this.props.match.params;\n    const cards = getCardsForDeck(this.context.cards, deckId);\n\n    return (\n      <>\n        <div\n          onClick={() => {\n            this.setState({ showAnswer: !this.state.showAnswer });\n          }}\n        >\n          <Flashcard\n            card={this.getCurrentCard()}\n            history={this.props.history}\n            nextCard={this.handleNext}\n            showAnswer={this.state.showAnswer}\n            deck={deckId}\n          />\n        </div>\n        <div className=\"button_group\">\n          {this.state.cardNumber < cards.length && (\n            <button onClick={(e) => this.handleNext(e)}>Next</button>\n          )}\n          <button\n            onClick={() => {\n              this.setState({ showAnswer: !this.state.showAnswer });\n            }}\n          >\n            Flip\n          </button>\n          {this.state.cardNumber > 1 && (\n            <button onClick={(e) => this.handleBack(e)}>Back</button>\n          )}\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './view-decks.css';\nimport { getCardsForDeck } from '../misc-functions';\nimport CardContext from '../card-context';\nimport config from '../config';\nimport TokenService from '../Services/token-service';\n\nexport default class RenderDecks extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      descriptionInputValue: '',\n      nameInputValue: '',\n      editDeckId: '',\n      decks: [],\n      cards: [],\n    };\n  }\n\n  static contextType = CardContext;\n\n  handleSave = (e) => {\n    e.preventDefault();\n    const id = this.state.editDeckId;\n    const deck_name = this.state.nameInputValue;\n    const description = this.state.descriptionInputValue;\n    const deckId = parseFloat(this.state.editDeckId);\n    const updatedDeck = { id, deck_name, description };\n    fetch(`${config.API_ENDPOINT}/deck/${deckId}`, {\n      method: 'PATCH',\n      body: JSON.stringify(updatedDeck),\n      headers: {\n        'content-type': 'application/json',\n        authorization: `bearer ${TokenService.getAuthToken()}`,\n      },\n    })\n      .then((res) => {\n        if (!res.ok) {\n          return res.json().then((error) => Promise.reject(error));\n        }\n      })\n      .then(() => {\n        this.context.updateDeck(updatedDeck);\n        this.setState({\n          editDeckId: '',\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  handleClickDelete = () => {\n    const deckId = parseFloat(this.state.editDeckId);\n    fetch(`${config.API_ENDPOINT}/deck/${deckId}`, {\n      method: 'DELETE',\n      headers: {\n        'content-type': 'application/json',\n        authorization: `bearer ${TokenService.getAuthToken()}`,\n      },\n    })\n      .then((res) => {\n        if (!res.ok) {\n          return res.json().then((e) => Promise.reject(e));\n        }\n      })\n      .then(() => {\n        this.context.deleteDeck(deckId);\n        let { cards = [] } = this.state;\n        cards = getCardsForDeck(cards, deckId);\n        cards.forEach((card) => {\n          return this.props.deleteCard(card.id);\n        });\n      })\n      .catch((error) => {\n        console.error({ error });\n      });\n  };\n  renderStandard(deck) {\n    const cards = this.context.cards;\n    const deckId = deck.id.toString();\n    const cardsInDeck = getCardsForDeck(cards, deckId);\n    let countCards = cardsInDeck.length;\n    return (\n      <>\n        <span className=\"inline-edit\">\n          <Link to={`/deck/${deck.id}`}>\n            <h4>{deck.deck_name}</h4>\n          </Link>\n          {deck.description}\n        </span>\n        <p>No. of cards: {countCards}</p>\n        <button\n          className=\"deck_buttons\"\n          onClick={(e) =>\n            this.setState({\n              editDeckId: deck.id,\n              nameInputValue: deck.deck_name,\n              descriptionInputValue: deck.description,\n            })\n          }\n        >\n          Edit\n        </button>\n      </>\n    );\n  }\n\n  renderEdit(deck) {\n    const initState = {\n      descriptionInputValue: '',\n      nameInputValue: '',\n      editDeckId: '',\n    };\n\n    return (\n      <>\n        <input\n          value={this.state.nameInputValue}\n          onChange={(e) => this.setState({ nameInputValue: e.target.value })}\n          className=\"inline-edit_input\"\n          name=\"edit-name\"\n          required\n        />\n        <input\n          defaultValue={this.state.descriptionInputValue}\n          onChange={(e) =>\n            this.setState({ descriptionInputValue: e.target.value })\n          }\n          className=\"inline-edit_input\"\n          name=\"edit description\"\n          required\n        />\n        {this.state.editDeckId === deck.id && (\n          <div className=\"button_group\">\n            <button onClick={(e) => this.setState({ ...initState })}>\n              Cancel\n            </button>\n            <button onClick={(e) => this.handleSave(e)}>Save</button>\n            <button onClick={(e) => this.handleClickDelete(e)}>Delete</button>\n          </div>\n        )}\n      </>\n    );\n  }\n\n  render() {\n    let decks = this.context.decks;\n    return (\n      <section className=\"page\" id=\"viewDecks\">\n        <>\n          <ul>\n            {decks.map((deck) => (\n              <li key={deck.id}>\n                {deck.id === this.state.editDeckId ? (\n                  <div>{this.renderEdit(deck)}</div>\n                ) : (\n                  <div>{this.renderStandard(deck)}</div>\n                )}\n              </li>\n            ))}\n          </ul>\n        </>{' '}\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './view-decks.css';\nimport RenderDecks from './render-decks';\nimport CardContext from '../card-context';\n\nexport default class ViewDecks extends React.Component {\n  static contextType = CardContext;\n  componentDidMount() {\n    this.context.getDecks();\n  }\n  render() {\n    return (\n      <section className=\"page\" id=\"viewDecks\">\n        <>\n          <h2>Your Decks</h2>\n          <p>Here are all of your decks!</p>\n          <RenderDecks />\n          <Link to=\"/newdeck\">\n            <button className=\"add\">Add new Deck</button>\n          </Link>\n        </>{' '}\n      </section>\n    );\n  }\n}\n","import config from '../config';\n\nconst AuthService = {\n  postLogin(credentials) {\n    return fetch(`${config.API_ENDPOINT}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify(credentials),\n    }).then((res) =>\n      !res.ok ? res.json().then((e) => Promise.reject(e)) : res.json()\n    );\n  },\n  postUser(user) {\n    return fetch(`${config.API_ENDPOINT}/users`, {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    }).then((res) =>\n      !res.ok ? res.json().then((e) => Promise.reject(e)) : res.json()\n    );\n  },\n};\n\nexport default AuthService;\n","import React, { Component } from 'react';\nimport TokenService from '../Services/token-service';\nimport AuthService from '../Services/auth-service';\n\nexport default class LoginForm extends Component {\n  static defaultProps = {\n    onLoginSuccess: () => {},\n  };\n  state = { error: null };\n\n  handleSubmitAuth = (ev) => {\n    ev.preventDefault();\n    this.setState({ error: null });\n    const userId = ev.target['login-userId'].value;\n    const password = ev.target['login-password'].value;\n    AuthService.postLogin({\n      user_name: userId,\n      password: password,\n    })\n      .then((res) => {\n        TokenService.saveAuthToken(res.authToken);\n        this.props.onLoginSuccess();\n      })\n      .catch((res) => {\n        this.setState({ error: res.error });\n      });\n  };\n\n  render() {\n    const { error } = this.state;\n    return (\n      <form className=\"login\" onSubmit={this.handleSubmitAuth}>\n        <div role=\"alert\">{error && <p className=\"red\">{error}</p>}</div>\n        <div className=\"user-id\">\n          <label htmlFor=\"login-userId\">UserName:</label>\n          <input\n            autoComplete=\"current-password\"\n            placeholder=\"User Name\"\n            type=\"text\"\n            name=\"user-name\"\n            id=\"login-userId\"\n          />\n        </div>\n        <div className=\"password\">\n          <label htmlFor=\"login-password\">Password:</label>\n          <input\n            autoComplete=\"current-password\"\n            placeholder=\"password\"\n            name=\"password\"\n            type=\"password\"\n            id=\"login-password\"\n          ></input>\n        </div>\n        <button type=\"submit\">Login</button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport LoginForm from './login-form';\nimport { Link } from 'react-router-dom';\nimport './landing-page.css';\nimport CardContext from '../card-context';\n\nexport default class LandingPage extends Component {\n  static contextType = CardContext;\n  static defaultProps = {\n    location: {},\n    history: {\n      push: () => {},\n    },\n  };\n  handleLoginSuccess = () => {\n    const { location, history } = this.props;\n    const destination = (location.state || {}).from || '/deck';\n    history.push(destination);\n  };\n  render() {\n    return (\n      <div>\n        <section className=\"page\" id=\"landing\">\n          <h2>The Streamlined Flash Card System.</h2>\n          <p>\n            Use your notes that you have already created and quickly generate a\n            deck of cards.\n          </p>\n          <h3>Easy.</h3>\n          <p>\n            Just copy and paste the notes you already wrote and get back a deck\n            of Flashcards.\n          </p>\n          <p>\n            To try out my application without creating and account use my test\n            user, Testy McTest. username: <b>tester</b> password:{' '}\n            <b>Password12345%</b>\n          </p>\n          <h3>\n            Log in and pick up where you left off or{' '}\n            <Link to=\"/account\">Register</Link>\n          </h3>\n          <LoginForm onLoginSuccess={this.handleLoginSuccess} />\n          <br />\n        </section>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport TokenService from '../../Services/token-service';\nimport './header.css';\n\nexport default class Header extends Component {\n  handleLogoutClick = () => {\n    TokenService.clearAuthToken();\n  };\n\n  renderLogoutLink() {\n    return (\n      <div className=\"logged-in\">\n        <Link onClick={this.handleLogoutClick} to=\"/\">\n          Logout\n        </Link>\n      </div>\n    );\n  }\n\n  renderLoginLink() {\n    return (\n      <div className=\"logged-out\">\n        <Link to=\"/account\">Register</Link>-<Link to=\"/\">Log in</Link>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <nav className=\"Header\">\n        <h1>\n          <Link to=\"/deck\"> Quick Card</Link>\n        </h1>\n        {TokenService.hasAuthToken()\n          ? this.renderLogoutLink()\n          : this.renderLoginLink()}\n      </nav>\n    );\n  }\n}\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport TokenService from '../Services/token-service';\n\nexport default function PrivateRoute({ component, ...props }) {\n  const Component = component;\n  return (\n    <Route\n      {...props}\n      render={(componentProps) =>\n        TokenService.hasAuthToken() ? (\n          <Component {...componentProps} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/',\n              state: { from: componentProps.location },\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport TokenService from '../Services/token-service';\n\nexport default function PublicRoute({ component, ...props }) {\n  const Component = component;\n  return (\n    <Route\n      {...props}\n      render={(componentProps) =>\n        TokenService.hasAuthToken() ? (\n          <Redirect to={'/'} />\n        ) : (\n          <Component {...componentProps} />\n        )\n      }\n    />\n  );\n}\n","import React, { Component } from 'react';\nimport AuthService from '../Services/auth-service';\nimport './signup-form.css';\n\nexport default class RegistrationForm extends Component {\n  handleSuccess = () => {\n    this.props.history.push('/');\n  };\n\n  state = { error: null };\n\n  handleSubmit = (ev) => {\n    ev.preventDefault();\n    const { full_name, nick_name, user_name, password } = ev.target;\n    AuthService.postUser({\n      user_name: user_name.value,\n      password: password.value,\n      full_name: full_name.value,\n      nickname: nick_name.value,\n    })\n      .then((user) => {\n        full_name.value = '';\n        nick_name.value = '';\n        user_name.value = '';\n        password.value = '';\n        this.handleSuccess();\n      })\n      .catch((res) => {\n        this.setState({ error: res.error });\n      });\n  };\n\n  render() {\n    const { error } = this.state;\n    return (\n      <form\n        className=\"RegistrationForm, container\"\n        onSubmit={this.handleSubmit}\n      >\n        <h2>Register your account</h2>\n        <div role=\"alert\">{error && <p className=\"red\">{error}</p>}</div>\n        <div className=\"full_name\">\n          <label htmlFor=\"RegistrationForm__full_name\">Full name:</label>\n          <input\n            name=\"full_name\"\n            type=\"text\"\n            required\n            id=\"RegistrationForm__full_name\"\n          ></input>\n        </div>\n        <div className=\"user_name\">\n          <label htmlFor=\"RegistrationForm__user_name\">UserName:</label>\n          <input\n            autoComplete=\"username\"\n            name=\"user_name\"\n            type=\"text\"\n            required\n            id=\"RegistrationForm__user_name\"\n          ></input>\n        </div>\n        <div className=\"password\">\n          <label htmlFor=\"RegistrationForm__password\">Password:</label>\n          <input\n            autoComplete=\"current-password\"\n            name=\"password\"\n            type=\"password\"\n            required\n            id=\"RegistrationForm__password\"\n          ></input>\n        </div>\n        <div className=\"nick_name\">\n          <label htmlFor=\"RegistrationForm__nick_name\">Nickname:</label>\n          <input\n            name=\"nick_name\"\n            type=\"text\"\n            required\n            id=\"RegistrationForm__nick_name\"\n          ></input>\n        </div>\n        <button type=\"submit\">Register</button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport CardContext from '../card-context';\nimport NewDeck from '../AddDeck/new-deck';\nimport './App.css';\nimport ViewCard from '../ViewCards/view-cards';\nimport config from '../config';\nimport ViewDecks from '../ViewDecks/view-decks';\nimport LandingPage from '../LandingPage/landing-page';\nimport Header from './Header/header';\nimport TokenService from '../Services/token-service';\nimport PrivateRoute from '../Routes/private-route';\nimport PublicRoute from '../Routes/public-route';\nimport RegistrationForm from '../LandingPage/signup-form';\n\nclass App extends React.Component {\n  state = {\n    decks: [],\n    cards: [],\n  };\n\n  handleGetDecks = () => {\n    TokenService.hasAuthToken()\n      ? Promise.all([\n          fetch(`${config.API_ENDPOINT}/deck`, {\n            method: 'GET',\n            headers: {\n              'content-type': 'application/json',\n              authorization: `bearer ${TokenService.getAuthToken()}`,\n            },\n          }),\n          fetch(`${config.API_ENDPOINT}/card`, {\n            method: 'GET',\n            headers: {\n              'content-type': 'application/json',\n              authorization: `bearer ${TokenService.getAuthToken()}`,\n            },\n          }),\n        ])\n          .then(([deckRes, cardRes]) => {\n            if (!deckRes.ok) {\n              return deckRes.json().then((e) => Promise.reject(e));\n            }\n            if (!cardRes.ok) {\n              return cardRes.json().then((e) => Promise.reject(e));\n            }\n            return Promise.all([deckRes.json(), cardRes.json()]);\n          })\n          .then(([decks, cards]) => {\n            this.setState({ decks, cards });\n          })\n          .catch((error) => {\n            console.error({ error });\n          })\n      : this.setState({\n          notes: [],\n          deck: [],\n        });\n  };\n\n  handleCommitCards = (cards) => {\n    this.setState({\n      cards: [...this.state.cards, cards],\n    });\n  };\n\n  handleCommitDeck = (deck) => {\n    this.setState({\n      decks: [...this.state.decks, deck],\n    });\n  };\n\n  handleDeleteCard = (cardId) => {\n    this.setState({\n      cards: this.state.cards.filter((card) => card.id !== cardId),\n    });\n  };\n\n  handleDeleteDeck = (deckId) => {\n    this.setState({\n      decks: this.state.decks.filter((deck) => deck.id !== deckId),\n    });\n  };\n\n  handleUpdateDeck = (updatedDeck) => {\n    this.setState({\n      decks: this.state.decks.map((deck) =>\n        deck.id !== updatedDeck.id ? deck : updatedDeck\n      ),\n    });\n  };\n\n  handleUpdateCard = (updatedCard, cardId) => {\n    this.setState({\n      cards: this.state.cards.map((card) =>\n        card.id !== cardId ? card : updatedCard\n      ),\n    });\n  };\n\n  renderMain() {\n    return (\n      <>\n        [//Private routes will redirect to landing page if user is unauthorized]\n        <PrivateRoute path=\"/newdeck\" component={NewDeck} />\n        <PrivateRoute path=\"/deck/:deckId\" component={ViewCard} />\n        <PrivateRoute exact path=\"/deck\" component={ViewDecks} />\n        <PublicRoute exact path=\"/account\" component={RegistrationForm} />\n        <PublicRoute exact path=\"/\" component={LandingPage} />\n      </>\n    );\n  }\n\n  render() {\n    const context = {\n      decks: this.state.decks,\n      cards: this.state.cards,\n      getDecks: this.handleGetDecks,\n      commitCards: this.handleCommitCards,\n      commitDeck: this.handleCommitDeck,\n      deleteCard: this.handleDeleteCard,\n      deleteDeck: this.handleDeleteDeck,\n      updateDeck: this.handleUpdateDeck,\n      updateCard: this.handleUpdateCard,\n    };\n    return (\n      <CardContext.Provider value={context}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Header />\n          </header>\n          <main className=\"AppMain\">{this.renderMain()}</main>\n        </div>\n      </CardContext.Provider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}